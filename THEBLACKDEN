<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>The Black Den</title>
    <style>
        body {
            background-color: white;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        /* Login screen styling */
        #login-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            background-color: black;
            color: white;
        }

        #login-container input {
            padding: 10px;
            margin: 10px;
            font-size: 16px;
        }

        #login-container button {
            padding: 10px 20px;
            font-size: 16px;
            background-color: darkred;
            color: white;
            border: none;
            cursor: pointer;
        }

        #login-message {
            color: red;
            margin-top: 10px;
        }

        /* Main content hidden by default */
        #main-content {
            display: none;
        }

        h1.header {
            text-align: center;
            margin-top: 30px;
            font-size: 48px;
            background-color: black;
            font-family: "Vladimir Script", cursive;
            color: white;
            padding: 20px;
        }

        .tab1 {
            display: inline-block;
            width: 140px;
            height: 60px;
            background-color: darkred;
            border: 2px solid black;
            padding: 10px;
            margin: 20px;
            font-family: "Vladimir Script", cursive;
            color: white;
            font-size: 40px;
            text-align: center;
            line-height: 60px;
            cursor: pointer;
            user-select: none;
        }

        /* Admin tab and panel styling */
        .admin-tab {
            background-color: aqua;
            color: black;
            display: inline-block;
        }

        /* Logout button styling */
        #logout-button {
            position: absolute;
            top: 20px;
            right: 20px;
            padding: 10px 20px;
            font-size: 16px;
            background-color: darkred;
            color: white;
            border: none;
            cursor: pointer;
        }

        /* Admin Panel styles */
        #admin-panel {
            display: none;
            background-color: black;
            padding: 20px;
            color: white;
            min-height: 100vh;
        }
        .user-list {
            list-style: none;
            padding: 0;
        }
        .user-item {
            background-color: #333;
            margin: 10px;
            padding: 15px;
            border-radius: 5px;
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            align-items: center;
        }
        .user-item input {
            background-color: #555;
            color: white;
            border: 1px solid #777;
            padding: 8px;
            margin: 5px;
            border-radius: 3px;
        }
        .user-item .account-info {
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }
        .user-item .account-controls {
            display: flex;
            align-items: center;
            margin-top: 10px;
        }
        .user-item button {
            margin-left: 10px;
            background-color: darkred;
            color: white;
            border: none;
            cursor: pointer;
            padding: 8px 12px;
        }
        .user-item button.update {
            background-color: #4CAF50; /* Green color for update */
        }
        .user-item button.delete {
            background-color: #f44336; /* Red color for delete */
        }
    </style>
</head>
<body>

<!-- 🔐 Login Screen -->
<div id="login-container">
    <h2>Login to The Black Den</h2>
    <input type="text" id="username" placeholder="Username">
    <input type="password" id="password" placeholder="Password">
    <button onclick="checkLogin()">Login</button>
    <p id="login-message"></p>
</div>

<!-- 🌐 Main Website Content -->
<div id="main-content">
    <h1 class="header">The Black Den</h1>
    <div class="tab1" onclick="openCustomTab('Action')">Action</div>
    <div class="tab1" onclick="openCustomTab('Skill')">Skill</div>
    <div class="tab1" onclick="openCustomTab('Logic')">Logic</div>
    <div class="tab1 admin-tab" id="admin-tab" onclick="openAdminPanel()" style="display:none;">Admin Panel</div>
    <button id="logout-button" onclick="logout()" style="display:none;">Logout</button>
</div>

<!-- ⚙️ Admin Panel Content -->
<div id="admin-panel">
    <h2 style="color:white;">Admin Panel</h2>

    <!-- Add Account Form -->
    <div style="margin-bottom: 20px; padding: 15px; background-color: #222; border-radius: 5px;">
        <h3 style="margin-top: 0;">Add New Account</h3>
        <input type="text" id="new-username" placeholder="New Username" style="margin-right: 10px;">
        <input type="text" id="new-password" placeholder="New Password" style="margin-right: 10px;">
        <button onclick="addAccount()">Add Account</button>
    </div>
    
    <div id="admin-management-section">
        <h3 style="color: white;">Admin Management</h3>
        <div style="margin-bottom: 20px; padding: 15px; background-color: #222; border-radius: 5px;">
            <h4 style="margin-top: 0;">Add/Edit Admin Account</h4>
            <input type="text" id="admin-username-input" placeholder="Username" style="margin-right: 10px;">
            <input type="text" id="admin-password-input" placeholder="Password (leave blank to not change)" style="margin-right: 10px;">
            <button onclick="addOrUpdateAdmin()">Save Admin</button>
        </div>
        <ul id="admin-list" class="user-list">
            <!-- Admin items will be generated here by JavaScript -->
        </ul>
    </div>

    <h3 style="color: white;">User Management</h3>
    <ul id="user-management-list" class="user-list">
        <!-- User items will be generated here by JavaScript -->
    </ul>
    <button onclick="closeAdminPanel()">Close Admin Panel</button>
</div>

<script>
    // ✅ Generates a unique ID for device fingerprinting
    function generateDeviceId() {
        return 'device-' + Math.random().toString(36).substr(2, 9);
    }

    // ✅ Default users with deviceId, isSuspended, and isAdmin properties
    const defaultUsers = [
        { username: "user123", password: "lemonade", isSuspended: false, deviceId: null, isAdmin: false },
        { username: "THEAdmin", password: "pass", isSuspended: false, deviceId: null, isAdmin: true },
        { username: "player1", password: "gamer123", isSuspended: false, deviceId: null, isAdmin: false }
    ];

    let users = loadUsersFromLocalStorage();
    let currentUser = null;

    function loadUsersFromLocalStorage() {
        const storedUsers = localStorage.getItem('appUsers');
        let currentUsers = storedUsers ? JSON.parse(storedUsers) : defaultUsers;

        // Ensure the primary admin account exists even if other data is present
        const adminAccountExists = currentUsers.some(user => user.username === "THEAdmin" && user.isAdmin);
        if (!adminAccountExists) {
            const primaryAdmin = defaultUsers.find(user => user.username === "THEAdmin");
            if (primaryAdmin) {
                currentUsers.push(primaryAdmin);
            }
        }
        return currentUsers;
    }

    function saveUsersToLocalStorage() {
        localStorage.setItem('appUsers', JSON.stringify(users));
    }

    // ✅ Login check with device binding logic
    function checkLogin() {
        const userInput = document.getElementById("username").value.trim();
        const passInput = document.getElementById("password").value.trim();
        const message = document.getElementById("login-message");

        const user = users.find(u => u.username === userInput && u.password === passInput);

        if (user) {
            if (user.isSuspended) {
                message.textContent = "Your account has been temporarily suspended.";
                return;
            }

            // Check if device is linked and if it matches
            let currentDeviceId = localStorage.getItem(`device-${user.username}`);
            let isFirstLoginOnThisDevice = false;

            if (user.deviceId) {
                // If a device ID is already linked
                if (user.deviceId !== currentDeviceId) {
                    // Mismatch: Suspend the account
                    user.isSuspended = true;
                    saveUsersToLocalStorage();
                    message.textContent = "Security Alert: This account has been suspended due to an unauthorized login attempt from a new device.";
                    return;
                }
            } else {
                // First login: Link this device
                if (!currentDeviceId) {
                    currentDeviceId = generateDeviceId();
                    localStorage.setItem(`device-${user.username}`, currentDeviceId);
                }
                user.deviceId = currentDeviceId;
                saveUsersToLocalStorage();
                isFirstLoginOnThisDevice = true;
            }
            
            // Successful login
            document.getElementById("login-container").style.display = "none";
            document.getElementById("main-content").style.display = "block";
            document.getElementById("logout-button").style.display = "block";
            
            currentUser = user; // Set current user on successful login
            if (currentUser.isAdmin) {
                document.getElementById("admin-tab").style.display = "inline-block";
            } else {
                document.getElementById("admin-tab").style.display = "none";
            }

            // Display success message for first-time device link
            if (isFirstLoginOnThisDevice) {
                message.textContent = "Account successfully linked.";
                message.style.color = "green"; // Optional: Make success message green
                setTimeout(() => {
                    message.textContent = "";
                    message.style.color = "red"; // Reset color for potential future errors
                }, 3000); // Clear message after 3 seconds
            }
        } else {
            message.textContent = "Invalid username or password.";
        }
    }

    function openCustomTab(tabName) {
        alert("Navigating to " + tabName);
    }

    function logout() {
        currentUser = null;
        document.getElementById("login-container").style.display = "flex";
        document.getElementById("main-content").style.display = "none";
        document.getElementById("admin-panel").style.display = "none";
        document.getElementById("admin-tab").style.display = "none";
        document.getElementById("logout-button").style.display = "none";
        document.getElementById("login-message").textContent = ""; // Clear any messages
        document.getElementById("login-message").style.color = "red"; // Reset color
    }

    function openAdminPanel() {
        if (!currentUser || !currentUser.isAdmin) {
            alert("Access Denied: You must be an admin to view this panel.");
            return;
        }

        document.getElementById("admin-panel").style.display = "block";
        document.getElementById("main-content").style.display = "none";
        
        // This is the corrected logic.
        // It now shows the admin management section only if the current user is 'THEAdmin'.
        if (currentUser.username === "THEAdmin") {
            document.getElementById("admin-management-section").style.display = "block";
            renderAdmins();
        } else {
            document.getElementById("admin-management-section").style.display = "none";
        }
        renderUsers();
    }

    function closeAdminPanel() {
        document.getElementById("admin-panel").style.display = "none";
        document.getElementById("main-content").style.display = "block";
    }

    function addAccount() {
        const newUsername = document.getElementById("new-username").value.trim();
        const newPassword = document.getElementById("new-password").value.trim();

        if (newUsername && newPassword) {
            const existingUser = users.find(u => u.username === newUsername);
            if (existingUser) {
                alert("Username already exists.");
                return;
            }
            users.push({ username: newUsername, password: newPassword, isSuspended: false, deviceId: null, isAdmin: false });
            saveUsersToLocalStorage();
            alert("Account added successfully.");
            document.getElementById("new-username").value = "";
            document.getElementById("new-password").value = "";
            renderUsers();
        } else {
            alert("Please enter both username and password.");
        }
    }

    function addOrUpdateAdmin() {
        const adminUsername = document.getElementById("admin-username-input").value.trim();
        const adminPassword = document.getElementById("admin-password-input").value.trim();

        if (adminUsername) {
            const userIndex = users.findIndex(u => u.username === adminUsername);
            if (userIndex !== -1) {
                // Update existing user to admin
                const user = users[userIndex];
                if (adminPassword) {
                    user.password = adminPassword;
                }
                user.isAdmin = true;
                saveUsersToLocalStorage();
                alert(`User ${adminUsername} updated to admin.`);
            } else {
                // Add new admin user
                if (adminPassword) {
                    users.push({ username: adminUsername, password: adminPassword, isSuspended: false, deviceId: null, isAdmin: true });
                    saveUsersToLocalStorage();
                    alert(`New admin account ${adminUsername} created.`);
                } else {
                    alert("Please provide a password for new admin accounts.");
                }
            }
            document.getElementById("admin-username-input").value = "";
            document.getElementById("admin-password-input").value = "";
            renderAdmins();
            renderUsers();
        } else {
            alert("Please enter a username.");
        }
    }

    function updateAccount(index) {
        const userItem = document.getElementById(`user-item-${index}`);
        const newUsername = userItem.querySelector('input[type="text"]').value.trim();
        const newPassword = userItem.querySelector('input[type="password"]').value.trim();

        if (newUsername) {
            // Check for unique username
            const existingUser = users.find((u, i) => i !== index && u.username === newUsername);
            if (existingUser) {
                alert("Username already exists.");
                return;
            }

            users[index].username = newUsername;
            if (newPassword) {
                users[index].password = newPassword;
            }
            saveUsersToLocalStorage();
            renderUsers();
            alert("Account updated successfully.");
        } else {
            alert("Username cannot be empty.");
        }
    }

    function deleteAccount(index) {
        if (confirm(`Are you sure you want to delete user ${users[index].username}?`)) {
            users.splice(index, 1);
            saveUsersToLocalStorage();
            renderUsers();
            alert("Account deleted.");
        }
    }

    function deleteAdmin(index) {
        if (confirm(`Are you sure you want to delete admin ${users[index].username}?`)) {
            const userToDelete = users[index];
            if (userToDelete.username === "THEAdmin") {
                alert("The primary admin account cannot be deleted.");
                return;
            }
            users.splice(index, 1);
            saveUsersToLocalStorage();
            renderAdmins();
            renderUsers();
        }
    }

    function toggleSuspension(index) {
        users[index].isSuspended = !users[index].isSuspended;
        saveUsersToLocalStorage();
        renderUsers();
    }
    
    function demoteAdmin(index) {
        const userToDemote = users[index];
        if (userToDemote.username === "THEAdmin") {
            alert("The primary admin account cannot be demoted.");
            return;
        }
        userToDemote.isAdmin = false;
        saveUsersToLocalStorage();
        renderAdmins();
        renderUsers();
    }

    function renderUsers() {
        const userList = document.getElementById("user-management-list");
        userList.innerHTML = '';
        users.forEach((user, index) => {
            if (!user.isAdmin) {
                const userItem = document.createElement("li");
                userItem.className = "user-item";
                userItem.id = `user-item-${index}`;
                userItem.innerHTML = `
                    <div class="account-info">
                        <strong>Username:</strong> <input type="text" value="${user.username}">
                        <strong>Password:</strong> <input type="password" value="${user.password}">
                        <strong>Status:</strong> ${user.isSuspended ? '<span style="color:red;">Suspended</span>' : '<span style="color:green;">Active</span>'}
                    </div>
                    <div class="account-controls">
                        <button class="update" onclick="updateAccount(${index})">Update</button>
                        <button onclick="toggleSuspension(${index})">${user.isSuspended ? 'Unsuspend' : 'Suspend'}</button>
                        <button class="delete" onclick="deleteAccount(${index})">Delete</button>
                    </div>
                `;
                userList.appendChild(userItem);
            }
        });
    }

    function renderAdmins() {
        const adminList = document.getElementById("admin-list");
        adminList.innerHTML = '';
        users.forEach((user, index) => {
            if (user.isAdmin) {
                const adminItem = document.createElement("li");
                adminItem.className = "user-item";
                adminItem.innerHTML = `
                    <div class="account-info">
                        <strong>Username:</strong> ${user.username}
                        <strong>Status:</strong> ${user.isSuspended ? '<span style="color:red;">Suspended</span>' : '<span style="color:green;">Active</span>'}
                    </div>
                    <div class="account-controls">
                        ${user.username !== "THEAdmin" ? `<button class="update" onclick="demoteAdmin(${index})">Demote</button>` : ''}
                        ${user.username !== "THEAdmin" ? `<button class="delete" onclick="deleteAdmin(${index})">Delete</button>` : ''}
                    </div>
                `;
                adminList.appendChild(adminItem);
            }
        });
    }
</script>
</body>
</html>

