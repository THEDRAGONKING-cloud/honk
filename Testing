<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>The Black Den</title>
    <style>
        body {
            background-color: white;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        /* Login screen styling */
        #login-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            background-color: black;
            color: white;
        }

        #login-container input {
            padding: 10px;
            margin: 10px;
            font-size: 16px;
        }

        #login-container button {
            padding: 10px 20px;
            font-size: 16px;
            background-color: darkred;
            color: white;
            border: none;
            cursor: pointer;
        }

        #login-message {
            color: red;
            margin-top: 10px;
        }

        /* Main content hidden by default */
        #main-content {
            display: none;
        }

        h1.header {
            text-align: center;
            margin-top: 30px;
            font-size: 48px;
            background-color: black;
            font-family: "Vladimir Script", cursive;
            color: white;
            padding: 20px;
        }

        .tab1 {
            display: inline-block;
            width: 140px;
            height: 60px;
            background-color: darkred;
            border: 2px solid black;
            padding: 10px;
            margin: 20px;
            font-family: "Vladimir Script", cursive;
            color: white;
            font-size: 40px;
            text-align: center;
            line-height: 60px;
            cursor: pointer;
            user-select: none;
        }

        /* Admin tab and panel styling */
        .admin-tab {
            background-color: aqua;
            color: black;
            display: inline-block;
        }

        /* Logout button styling */
        #logout-button {
            position: absolute;
            top: 20px;
            right: 20px;
            padding: 10px 20px;
            font-size: 16px;
            background-color: darkred;
            color: white;
            border: none;
            cursor: pointer;
        }

        /* Admin Panel styles */
        #admin-panel {
            display: none;
            background-color: black;
            padding: 20px;
            color: white;
            min-height: 100vh;
        }
        .user-list {
            list-style: none;
            padding: 0;
        }
        .user-item {
            background-color: #333;
            margin: 10px;
            padding: 15px;
            border-radius: 5px;
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            align-items: center;
        }
        .user-item input {
            background-color: #555;
            color: white;
            border: 1px solid #777;
            padding: 8px;
            margin: 5px;
            border-radius: 3px;
        }
        .user-item .account-info {
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }
        .user-item .account-controls {
            display: flex;
            align-items: center;
            margin-top: 10px;
        }
        .user-item button {
            margin-left: 10px;
            background-color: darkred;
            color: white;
            border: none;
            cursor: pointer;
            padding: 8px 12px;
        }
        .user-item button.update {
            background-color: #4CAF50; /* Green color for update */
        }
        .user-item button.delete {
            background-color: #f44336; /* Red color for delete */
        }
    </style>
</head>
<body>

<!-- 🔐 Login Screen -->
<div id="login-container">
    <h2>Login to The Black Den</h2>
    <input type="text" id="username" placeholder="Username">
    <input type="password" id="password" placeholder="Password">
    <button onclick="checkLogin()">Login</button>
    <p id="login-message"></p>
</div>

<!-- 🌐 Main Website Content -->
<div id="main-content">
    <h1 class="header">The Black Den</h1>
    <div class="tab1" onclick="openCustomTab('Action')">Action</div>
    <div class="tab1" onclick="openCustomTab('Skill')">Skill</div>
    <div class="tab1" onclick="openCustomTab('Logic')">Logic</div>
    <div class="tab1 admin-tab" id="admin-tab" onclick="openAdminPanel()" style="display:none;">Admin Panel</div>
    <button id="logout-button" onclick="logout()" style="display:none;">Logout</button>
</div>

<!-- ⚙️ Admin Panel Content -->
<div id="admin-panel">
    <h2 style="color:white;">Admin Panel</h2>

    <!-- Add Account Forms -->
    <div style="margin-bottom: 20px; padding: 15px; background-color: #222; border-radius: 5px;">
        <h3 style="margin-top: 0;">Add New Admin Account</h3>
        <input type="text" id="new-admin-username" placeholder="New Admin Username" style="margin-right: 10px;">
        <input type="password" id="new-admin-password" placeholder="New Admin Password" style="margin-right: 10px;">
        <button onclick="addNewAdmin()">Add Admin</button>
    </div>

    <div style="margin-bottom: 20px; padding: 15px; background-color: #222; border-radius: 5px;">
        <h3 style="margin-top: 0;">Add New User Account</h3>
        <input type="text" id="new-user-username" placeholder="New User Username" style="margin-right: 10px;">
        <input type="password" id="new-user-password" placeholder="New User Password" style="margin-right: 10px;">
        <button onclick="addNewUser()">Add User</button>
    </div>

    <ul id="user-management-list" class="user-list">
        <!-- User items will be generated here by JavaScript -->
    </ul>
    <button onclick="closeAdminPanel()">Close Admin Panel</button>
</div>

<script>
    // ✅ Generates a unique ID for device fingerprinting
    function generateDeviceId() {
        return 'device-' + Math.random().toString(36).substr(2, 9);
    }

    // ✅ Default users with role and isSuspended properties (deviceId is now dynamic)
    const defaultUsers = [
        { username: "user123", password: "lemonade", role: "user", isSuspended: false },
        { username: "Electro", password: "shock", role: "admin", isSuspended: false },
        { username: "player1", password: "gamer123", role: "user", isSuspended: false }
    ];

    let users = loadUsersFromLocalStorage();
    let currentUser = null;
    let currentDeviceId = localStorage.getItem('globalDeviceId') || generateDeviceId();

    // Save a unique ID to local storage for the browser/device
    if (!localStorage.getItem('globalDeviceId')) {
        localStorage.setItem('globalDeviceId', currentDeviceId);
    }

    function loadUsersFromLocalStorage() {
        const storedUsers = localStorage = JSON.parse(localStorage.getItem('appUsers'));
        return storedUsers ? storedUsers : defaultUsers;
    }

    function saveUsersToLocalStorage() {
        localStorage.setItem('appUsers', JSON.stringify(users));
    }

    // ✅ Login check with device binding logic (binds to user accounts, not admins)
    function checkLogin() {
        const userInput = document.getElementById("username").value.trim();
        const passInput = document.getElementById("password").value.trim();
        const message = document.getElementById("login-message");

        const user = users.find(u => u.username === userInput && u.password === passInput);

        if (user) {
            if (user.isSuspended) {
                message.textContent = "Your account has been temporarily suspended.";
                return;
            }
            
            // Only perform device binding for regular users
            if (user.role === "user") {
                let storedUserDeviceId = localStorage.getItem(`device-${user.username}`);

                if (storedUserDeviceId) {
                    // Device already linked, check for a match
                    if (storedUserDeviceId !== currentDeviceId) {
                        user.isSuspended = true;
                        saveUsersToLocalStorage();
                        message.textContent = "Security Alert: This account has been suspended due to an unauthorized login attempt from a new device.";
                        return;
                    }
                } else {
                    // First login, link this device
                    localStorage.setItem(`device-${user.username}`, currentDeviceId);
                }
            }

            // Successful login for both admins and users
            document.getElementById("login-container").style.display = "none";
            document.getElementById("main-content").style.display = "block";
            document.getElementById("logout-button").style.display = "block";

            currentUser = user; // Store the logged-in user object

            // Show admin tab if the user is an admin
            if (currentUser.role === "admin") {
                document.getElementById("admin-tab").style.display = "inline-block";
            } else {
                document.getElementById("admin-tab").style.display = "none";
            }
        } else {
            message.textContent = "Invalid username or password.";
        }
    }

    // ✅ Add Account Function with RBAC
    function addAccount(newUsername, newPassword, newRole) {
        if (!currentUser || currentUser.role !== "admin") {
            alert("Permission denied. Only admins can create new accounts.");
            return;
        }

        if (!newUsername || !newPassword) {
            alert("Username and password cannot be empty.");
            return;
        }

        const userExists = users.some(user => user.username === newUsername);
        if (userExists) {
            alert("A user with that username already exists.");
            return;
        }

        const newUser = {
            username: newUsername,
            password: newPassword,
            role: newRole, // Set the role of the new user
            isSuspended: false
        };
        users.push(newUser);
        saveUsersToLocalStorage();
        alert(`Account for ${newUsername} (${newRole}) added successfully.`);
        renderUserList(); // Refresh the list
    }

    function addNewAdmin() {
        const newUsernameInput = document.getElementById("new-admin-username");
        const newPasswordInput = document.getElementById("new-admin-password");
        addAccount(newUsernameInput.value.trim(), newPasswordInput.value.trim(), "admin");
        newUsernameInput.value = "";
        newPasswordInput.value = "";
    }

    function addNewUser() {
        const newUsernameInput = document.getElementById("new-user-username");
        const newPasswordInput = document.getElementById("new-user-password");
        addAccount(newUsernameInput.value.trim(), newPasswordInput.value.trim(), "user");
        newUsernameInput.value = "";
        newPasswordInput.value = "";
    }
    
    // ✅ Function to delete a user
    function deleteUser(username) {
        if (!currentUser || currentUser.role !== "admin") {
            alert("Permission denied.");
            return;
        }
        if (currentUser.username === username) {
            alert("You cannot delete your own admin account.");
            return;
        }
        if (confirm(`Are you sure you want to delete ${username}?`)) {
            users = users.filter(user => user.username !== username);
            localStorage.removeItem(`device-${username}`); // Remove the device link
            saveUsersToLocalStorage();
            renderUserList();
        }
    }

    // ✅ Function to toggle user suspension
    function toggleSuspension(username) {
        if (!currentUser || currentUser.role !== "admin") {
            alert("Permission denied.");
            return;
        }
        const user = users.find(u => u.username === username);
        if (user) {
            if (currentUser.username === username) {
                alert("You cannot suspend your own account.");
                return;
            }
            user.isSuspended = !user.isSuspended;
            saveUsersToLocalStorage();
            renderUserList();
        }
    }

    // ✅ Admin panel functions
    function openAdminPanel() {
        if (currentUser && currentUser.role === "admin") {
            document.getElementById("main-content").style.display = "none";
            document.getElementById("admin-panel").style.display = "block";
            renderUserList();
        } else {
            alert("Access denied. Admin privileges required.");
        }
    }

    function closeAdminPanel() {
        document.getElementById("admin-panel").style.display = "none";
        document.getElementById("main-content").style.display = "block";
    }

    // ✅ Render the user list in the admin panel
    function renderUserList() {
        const userListElement = document.getElementById("user-management-list");
        userListElement.innerHTML = '';
        users.forEach(user => {
            const userItem = document.createElement("li");
            userItem.className = "user-item";
            const deviceId = localStorage.getItem(`device-${user.username}`);
            userItem.innerHTML = `
                <div class="account-info">
                    <strong>Username:</strong> ${user.username} <br>
                    <strong>Role:</strong> ${user.role} <br>
                    <strong>Suspended:</strong> ${user.isSuspended ? 'Yes' : 'No'} <br>
                    <strong>Device ID:</strong> ${user.role === 'user' ? (deviceId || 'N/A') : 'N/A'}
                </div>
                <div class="account-controls">
                    <button class="${user.isSuspended ? 'update' : 'delete'}" onclick="toggleSuspension('${user.username}')">
                        ${user.isSuspended ? 'Unsuspend' : 'Suspend'}
                    </button>
                    <button class="delete" onclick="deleteUser('${user.username}')">Delete</button>
                </div>
            `;
            userListElement.appendChild(userItem);
        });
    }

    // ✅ Basic tab navigation
    function openCustomTab(tabName) {
        alert("Navigating to " + tabName + " tab.");
    }

    // ✅ Logout function
    function logout() {
        currentUser = null;
        document.getElementById("login-container").style.display = "flex";
        document.getElementById("main-content").style.display = "none";
        document.getElementById("logout-button").style.display = "none";
        document.getElementById("admin-tab").style.display = "none";
    }
</script>

</body>
</html>
